4/20/20

Today, I begin working with PyT. The last thing I worked on was created a program that used a JavaScript frontend to collect user input that was then pushed to Python (where the Flask server was being run). From Python, the user input was carried into C++ via Pybind11 where an operation was performed. The result was then return to Python and then back to the JavaScript frontend.

The purpose of creating this program was so that we would have another example that we can run PyT on to generate a taint analysis. This brings me to my current purpose: get PyT working on my machine so that I can test it out on the example program I created.

I am going to begin by cloning the pyT repository to the PyTWork folder.

I ran all the tests by navigating to the pyt folder and typing "python3 -m pyt" and all the tests worked. I did hit a snag, though. Here's what I need to learn more about:
- What is output and where?
- Where is the trigger file?

I found a lead on the trigger files in this folder: /Users/dinobecaj/Documents/ComputerScienceMS/LyonsWork/MLRA/PyTWork/pyt/pyt/vulnerability_definitions/

python3 -m pyt -t /Use
rs/dinobecaj/Documents/ComputerScienceMS/LyonsWork/MLRA/PyTWork/pyt/pyt/vulnera
bility_definitions/all_trigger_words.pyt main_prog.py

yields "No vulnerabilities" 

------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------

4/21/20

Today I am going to start by looking at how PyT is used in the BitBucket MLRA repository.

Turns out that the BitBucket repository also yields "No vulnerabilities". Going to email Lyons and see.


------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------

4/25/20

Run this for all tests
to do: test original code
if it doesn't work, copy multiply line right beneath request
test it out in the form we have it. Then test it before the for loop.
Email as soon as we have.

I am going to begin by testing pyt on my code.

Did not work. Returned "No vulnerabilities found." Now I am going to try moving matMult.mulitply() call to beneath the request.form() in main_prog.py.

Did not work. Now going to try copying main_prog.py into the pyt folder. Copied into pyt folder -- other examples report vulnerability, my example does not.

Didn't work, still getting the same output, even when I add other sources such as "request" "request.form", etc. Might be a problem with the source. Puzzling because in the 'simple_vulnerability.py' example provided in the pyt repository, pyt was able to pick up request.form. It picked it up, however, as 'form['.

Will email Lyons for clarification.

------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------

4/27/20

Dr. Lyons suggested that I simply assign the return value of request.form to a variable and then push that variable to matMult.multiply(). Will attempt this now.

This works! Vulnerability is returned. Emailed Lyons to update him on progress.

------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------

4/28/20

Dr. Lyons suggested I try the following:

The only issue remaining is what is preventing it from chaining the assignments
that start at your source and go to your sink.

While we suspect that the for loop is the issue, you should be systematic about testing.
1. Move your current 'fake' multiple line to just above your real multiply line. You should still get a vulnerability. This will prove that Pyt is processing all the lines between your source and your 'real' sink even if it does not find your 'real' vulnerability

## This is true. There is still a vulnerability. 

2. Write down by hand the chain of assignments from your sink and match each step in the chain by hand with your source code.

##


3. Move your 'fake' multiply line to each source code line where there is a step in the chain of assignments
and put in the new assigned variable as the argument to multiply and check for vul


------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------

5/18/20

I am going to change my program by turning the request data into a simple list of all the numbers contained. This list will then be passed into the matMult function where it will be manipulated by the C++ and then returned.

------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------

5/19/20

Made changes to multilingual program. The pybind11 matMult.multiply function now takes the entire list of data from the request and manipulates it within C++. The function then returns a 2D vector.

Now I'm going to test PyT on the new program.

------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------

5/24/20

The first thing I'm going to do is create a quick script that can parse .cpp files to search for m.def(. This script will then create a list of all the functions that are made into modules -- this list is then used to update the trigger files

The second script will then take the new trigger file as an argument to run the pyt script.

I finished off the day by creating a script that creates a dictionary of all cpp files contained (as keys) as well as their paths (values).
 
------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------

5/26/20


Currently, my script identifies all the functions that are found in a cpp file. The next step is to write them as sinks in the trigger file. Need to figure out the best way of doing this.

First, check if the strings are present, then perform.

------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------

5/27/20

Today I need to write the keywords as sinks in the trigger file.
- Open the trigger file
- Find the right place to write the sinks
- Write the sinks

I wrote the program that identifies sinks and writes them to the trigger file. If I run into a problem with this, I can just write all the words into all the trigger files.

Need to adjust my program so it takes a folder as an argument. Then I need to run pyt on my program.

Now it does this -- takes a folder as an argument and runs pyt.

------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------

6/3/20

Today I am going to modify the pyt script within the pyt module located at '/opt/anaconda3/lib/python3.7/site-packages/python_taint-0.42-py3.7.egg/pyt/'. This is the local of the pyt module that is used during the script call.

I am modifying the pyt __main__.py and __vulnerabilities__.py scripts to generate a csv file.

Done successfully. A CSV file is now produced that details found vulnerabilities.

------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------

6/5/20

I need to fix up my script because right now, it locates sinks within a single cpp file and tests the function calls on a 'main.py'. If the function doesn't have a 'main.py', the script just won't work. I need to program to check every python file to see if there is a call to the functions that are sinks.

------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------

6/20/20

Move Multilingual Matrix Multiplier directory to PyTWork directory for the sake of organization. Need to test right now to see if it still works. Also, renamed this file DevNotes.txt.
